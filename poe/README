$Id$

-----------
What POE Is
-----------

POE is an application kernel that uses event driven state machines as
threads.  It includes a high-level I/O library that hides most of the
usual client/server tediosity.  It has been developed and used in
mission-critical systems since August 1998.

---------------------
Documentation Roadmap
---------------------

The POE manpage's SEE ALSO section lists the topics covered in each
manpage.  It's a good starting place.

------------------
Basic Installation
------------------

POE may be installed through the CPAN shell in the usual CPAN shell
manner.  It typically is:

  perl -MCPAN -e 'install POE'

It involves a little more work if you have an older CPAN shell:

  perl -MCPAN -e shell
  install POE

--------------------------
Getting The Latest Version
--------------------------

POE can also be installed manually.  Tarballs are available from at
least three sources:

The most recent stable release can be found at your favorite CPAN
mirror.  If you don't have a favorite CPAN mirror, there's always:

  ftp://ftp.cpan.org/pub/CPAN/authors/id/R/RC/RCAPUTO/

The most recent development snapshot is available from two locations:

  http://poe.perl.org/
  http://sourceforge.net/projects/poe/

The SourceForge project includes a CVS repository browser, so you can
look around to see what's new.  It also has facilities for people to
submit bug reports, patches, and support requests.

---------------------------
Building The Latest Version
---------------------------

Downloading and unpacking the distribution are left as an exercise for
the reader.  See the previous section for tarball locations.

System requirements and copatibility issues are covered in the main
POE manpage.  You can preview them before building POE.

  perldoc ./POE.pm

Please read the Changes file if you already have programs which use
POE.  Sometimes there are changes that break compatibility with older
versions, and the Changes file can tell you about them before you
install POE.

  less ./Changes

If everything looks good, build POE.

  perl Makefile.PL
  make

Then test the distribution.  This is an important step since it also
ferrets out the modules POE needs.  It reports on the POE components
which won't work because of missing dependencies, and it recommends
things to install.  Please read the dependency report carefully.

  make test

Now you're ready to install POE, but first you may want to look at its
samples.  All the programs in the samples subdirectory are written to
run from the distribution directory without POE being installed yet.

  cd ./samples
  ls -l

  [try some]

  cd ..

Finally you can install it:

  make install

--------------------
Distribution Details
--------------------

This distribution comes with several sample and tutorial programs in
its samples/ directory.  These programs are NOT installed because they
have limited use and take up a lot of space and have limited use.
They will be split into a separate distribution in the near future.

The lib/ directory includes a few useful utilities, including a
relatively portable bidirectional pipe creator.  There's also a small
test coverage module, harness, and report.  The test coverage summary
at the end of this file was generated by that system.  These utilities
aren't installed either.

The test programs, in t/, may also be interesting examples, although
they're more geared towards exercising POE.  The tests also aren't
installed.

All in all, the actual installed bits of POE are probably around a
third of the total distribution, and about a quarter of B<that> is
documentation.

------------
Test Results
------------

Some of the tests, like Tk's and Gtk's, can be interactive, if only to
place a window.  Unfortunately, the time it takes to acknowledge these
interactive tests skews test results.  Any results that include
interactive tests will not include times.

** POE 0.1203 on OS/2

(OS/2 doesn't grok system vs. user time.)

Hardware: Cyrix P166+; 64MB RAM
System  : OS/2 4.0, Fix 13
Perl    : v5.6.0
Gtk     : (not installed)
Tk      : (not installed)
Event   : (not installed)

All tests successful, 4 tests and 5 subtests skipped.
Files=23, Tests=406, 211 wallclock secs ( 0.00 cusr +  0.00 csys =  0.00 CPU)

** POE 0.1203 on FreeBSD

Hardware: AMD 486-40; 16MB RAM
System  : FreeBSD 4.0-STABLE
Perl    : v5.6.0
Gtk     : 0.7000
Tk      : 800.021
Event   : 0.79

All tests successful.
Files=23, Tests=431, [ some tests paused ]

** POE 0.1203 on Linux

Hardware: dual Celeron 500; 265MB RAM
System  : Linux 2.2.15 SMP
Perl    : v5.6.0
Gtk     : (not installed)
Tk      : (not installed)
Event   : 0.79

All tests successful, 2 tests skipped.
Files=23, Tests=415, 102 wallclock secs (19.69 cusr +  0.74 csys = 20.43 CPU)

** POE 0.1203 on Solaris/SunOS 5.7

(Does anyone know how remote users can find a Sparc/SunOS machine's
CPU type(s) and speed(s)?)

Hardware: SPARCstation-20; unknown speed; 320MB RAM
System  : SunOS 5.7
Perl    : 5.005_03
Gtk     : (not installed)
Tk      : (not installed)
Event   : (not installed)

All tests successful, 4 tests skipped.
Files=23,  Tests=406, 114 wallclock secs (55.25 cusr +  5.31 csys = 60.56 CPU)

** POE 0.1202 on Solaris/SunOS 5.8

(dynweb's machine rocks)

Hardware: SPARCstation-80; 2x UltraSparc II-450; 1GB RAM
System  : SunOS 5.7
Perl    : 5.6.0
Gtk     : (not installed)
Tk      : (not installed)
Event   : (not installed)

All tests successful, 5 tests skipped.
Files=22, Tests=308, 64 wallclock secs (11.63 cusr +  0.94 csys = 12.57 CPU)

-------------
Test Coverage
-------------

The test coverage numbers are statistically meaningless.  Still, 100%
coverage is a fun goal.  Increasing the coverage percents gives the
author some small sense of accomplishment, and it assures users that
something's being done to assure POE's quality.

These results are for POE 0.1202 on the FreeBSD test machine.  This
machine is the slowest of the bunch, but it also has the most support
libraries installed.  The percent deltas are since version 0.1110.

  Source File                         =   Ran / Total = Covered
  POE.pm                              =    23 /    24 =  95.83%
  POE/Component.pm                    =     5 /     5 = 100.00%
  POE/Component/Server/TCP.pm         =    23 /    23 = 100.00%
  POE/Driver.pm                       =     5 /     5 = 100.00%
  POE/Driver/SysRW.pm                 =    42 /    54 =  77.78%
  POE/Filter.pm                       =     5 /     5 = 100.00%
  POE/Filter/Block.pm                 =    37 /    37 = 100.00%
  POE/Filter/HTTPD.pm                 =    11 /    88 =  12.50%
  POE/Filter/Line.pm                  =    77 /    82 =  93.90%
  POE/Filter/Reference.pm             =    60 /    66 =  90.91%
  POE/Filter/Stream.pm                =    11 /    11 = 100.00%
  POE/Kernel.pm                       =   613 /   815 =  75.21% (+0.95%)
  POE/NFA.pm                          =     9 /   144 =   6.25%
  POE/Preprocessor.pm                 =   147 /   167 =  88.02% (+0.07%)
  POE/Session.pm                      =   126 /   181 =  69.61%
  POE/Wheel.pm                        =    11 /    11 = 100.00%
  POE/Wheel/FollowTail.pm             =    75 /    96 =  78.12% (+2.26%)
  POE/Wheel/ListenAccept.pm           =    39 /    53 =  73.58% (+3.37%)
  POE/Wheel/ReadWrite.pm              =   111 /   184 =  60.33%
  POE/Wheel/SocketFactory.pm          =   197 /   234 =  84.19% (+1.32%)
  All Told                            =  1627 /  2285 =  71.20% (+0.74%)

Thanks for reading!

-- Rocco Caputo / troc@netrus.net / poe.perl.org / poe.sourceforge.net
